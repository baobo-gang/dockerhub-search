# -*- coding: utf-8 -*-
import sys
import requests

# Form implementation generated from reading ui file 'untitled.ui'
#
# Created by: PyQt5 UI code generator 5.15.9
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

from PyQt5.QtCore import Qt
from PyQt5 import QtCore, QtGui, QtWidgets


class Ui_Form(object):
    def setupUi(self, Form):
        Form.setObjectName("Form")
        Form.resize(1104, 790)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(Form.sizePolicy().hasHeightForWidth())
        Form.setSizePolicy(sizePolicy)
        self.pushButton = QtWidgets.QPushButton(Form)
        self.pushButton.setGeometry(QtCore.QRect(840, 50, 91, 41))
        self.pushButton.setObjectName("pushButton")
        self.textEdit = QtWidgets.QTextEdit(Form)
        self.textEdit.setGeometry(QtCore.QRect(360, 50, 431, 41))
        self.textEdit.setObjectName("textEdit")
        self.textEdit.setAlignment(Qt.AlignVCenter)
        self.textEdit.setStyleSheet("font-size : 20px;")
        self.label = QtWidgets.QLabel(Form)
        self.label.setGeometry(QtCore.QRect(370, 30, 121, 16))
        self.label.setObjectName("label")
        self.textEdit_2 = QtWidgets.QTextEdit(Form)
        self.textEdit_2.setStyleSheet("font-size : 18px;")
        self.textEdit_2.setGeometry(QtCore.QRect(110, 150, 811, 621))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.textEdit_2.sizePolicy().hasHeightForWidth())
        self.textEdit_2.setSizePolicy(sizePolicy)
        self.textEdit_2.setTabletTracking(False)
        self.textEdit_2.setAutoFillBackground(False)
        self.textEdit_2.setVerticalScrollBarPolicy(QtCore.Qt.ScrollBarAlwaysOn)
        self.textEdit_2.setObjectName("textEdit_2")
        self.label_2 = QtWidgets.QLabel(Form)
        self.label_2.setGeometry(QtCore.QRect(110, 30, 211, 16))
        self.label_2.setObjectName("label_2")
        self.textEdit_3 = QtWidgets.QTextEdit(Form)
        self.textEdit_3.setGeometry(QtCore.QRect(110, 60, 51, 31))
        self.textEdit_3.setObjectName("textEdit_3")
        self.label_3 = QtWidgets.QLabel(Form)
        self.label_3.setGeometry(QtCore.QRect(170, 70, 72, 15))
        self.label_3.setObjectName("label_3")
        self.textEdit_4 = QtWidgets.QTextEdit(Form)
        self.textEdit_4.setGeometry(QtCore.QRect(190, 60, 51, 31))
        self.textEdit_4.setObjectName("textEdit_4")
        self.pushButton.clicked.connect(self.search)

        self.retranslateUi(Form)
        QtCore.QMetaObject.connectSlotsByName(Form)

    def retranslateUi(self, Form):
        _translate = QtCore.QCoreApplication.translate
        Form.setWindowTitle(_translate("Form", "dockerhub镜像搜索"))
        self.pushButton.setText(_translate("Form", "搜索"))
        self.label.setText(_translate("Form", "请输入关键字"))
        self.label_2.setText(_translate("Form", "请输入搜索的页数（1页为25条）"))
        self.label_3.setText(_translate("Form", "-"))

    def search(self):
        # Docker Hub API URL
        url = 'https://hub.docker.com/v2/search/repositories/'
        nr = self.textEdit.toPlainText()
        # 设置查询参数
        params = {
            'query': f"{nr}",
            'page_size': 25  # 设置每页返回的结果数量
        }
        a = int(self.textEdit_3.toPlainText())
        b = int(self.textEdit_4.toPlainText())
        # 循环获取每一页的结果
        for page in range(a, b):
            params['page'] = page
            # 发送 GET 请求获取镜像信息
            response = requests.get(url, params=params)

            # 处理响应
            if response.status_code == 200:
                data = response.json()
                # 根据需要处理镜像数据
                # 示例：打印镜像名称和仓库名称
                for result in data['results']:
                    repo_name = result['repo_name']
                    self.textEdit_2.append(f'docker pull {repo_name}')
                    QtWidgets.QApplication.processEvents()
            else:
                self.textEdit_2.append(f'Error: {response.status_code}, {response.text}')


if __name__ == '__main__':
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QWidget()
    ui = Ui_Form()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
